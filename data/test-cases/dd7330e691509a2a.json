{"uid":"dd7330e691509a2a","name":"Modal dialogs","fullName":"tests.test_windows.TestWindows#test_modal_dialogs","historyId":"71c8f1108d6b81b71e1b035678e839be","time":{"start":1712913077188,"stop":1712913080006,"duration":2818},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"showLargeModal\" type=\"button\" class=\"mt-2 btn btn-primary\">...</button> is not clickable at point (696, 324). Other element would receive the click: <h1 class=\"text-center\">...</h1>\n  (Session info: chrome-headless-shell=123.0.6312.105)\nStacktrace:\n#0 0x564cdd0dc873 <unknown>\n#1 0x564cdcdd28c6 <unknown>\n#2 0x564cdce24233 <unknown>\n#3 0x564cdce2214e <unknown>\n#4 0x564cdce1fb27 <unknown>\n#5 0x564cdce1eed3 <unknown>\n#6 0x564cdce12507 <unknown>\n#7 0x564cdce3f5a2 <unknown>\n#8 0x564cdce11e98 <unknown>\n#9 0x564cdce3f76e <unknown>\n#10 0x564cdce5dc19 <unknown>\n#11 0x564cdce3f343 <unknown>\n#12 0x564cdce10593 <unknown>\n#13 0x564cdce10f5e <unknown>\n#14 0x564cdd0a085b <unknown>\n#15 0x564cdd0a47b5 <unknown>\n#16 0x564cdd08e581 <unknown>\n#17 0x564cdd0a5342 <unknown>\n#18 0x564cdd07388f <unknown>\n#19 0x564cdd0cb738 <unknown>\n#20 0x564cdd0cb90b <unknown>\n#21 0x564cdd0db9c4 <unknown>\n#22 0x7fcca2a94ac3 <unknown>","statusTrace":"self = <test_windows.TestWindows object at 0x7f4f2a240b00>\n\n    @allure.title(\"Modal dialogs\")\n    def test_modal_dialogs(self):\n        self.modal_dialogs.open()\n        self.modal_dialogs.is_opened()\n        self.modal_dialogs.click_button_small_modal()\n        self.modal_dialogs.check_small_modal()\n>       self.modal_dialogs.click_button_large_modal()\n\ntests/test_windows.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/windows/modal_dialogs.py:30: in click_button_large_modal\n    self.wait.until(EC.element_to_be_clickable(self.BUTTON_LARGE_MODAL)).click()\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4f2a277ce0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x564cdd0cb90b \\\\u003Cunknown>\\\\n#21 0x564cdd0db9c4 \\\\u003Cunknown>\\\\n#22 0x7fcca2a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"showLargeModal\" type=\"button\" class=\"mt-2 btn btn-primary\">...</button> is not clickable at point (696, 324). Other element would receive the click: <h1 class=\"text-center\">...</h1>\nE         (Session info: chrome-headless-shell=123.0.6312.105)\nE       Stacktrace:\nE       #0 0x564cdd0dc873 <unknown>\nE       #1 0x564cdcdd28c6 <unknown>\nE       #2 0x564cdce24233 <unknown>\nE       #3 0x564cdce2214e <unknown>\nE       #4 0x564cdce1fb27 <unknown>\nE       #5 0x564cdce1eed3 <unknown>\nE       #6 0x564cdce12507 <unknown>\nE       #7 0x564cdce3f5a2 <unknown>\nE       #8 0x564cdce11e98 <unknown>\nE       #9 0x564cdce3f76e <unknown>\nE       #10 0x564cdce5dc19 <unknown>\nE       #11 0x564cdce3f343 <unknown>\nE       #12 0x564cdce10593 <unknown>\nE       #13 0x564cdce10f5e <unknown>\nE       #14 0x564cdd0a085b <unknown>\nE       #15 0x564cdd0a47b5 <unknown>\nE       #16 0x564cdd08e581 <unknown>\nE       #17 0x564cdd0a5342 <unknown>\nE       #18 0x564cdd07388f <unknown>\nE       #19 0x564cdd0cb738 <unknown>\nE       #20 0x564cdd0cb90b <unknown>\nE       #21 0x564cdd0db9c4 <unknown>\nE       #22 0x7fcca2a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1712912845286,"stop":1712912845302,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"tmp_path_factory","time":{"start":1712912845303,"stop":1712912845303,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"tmp_path","time":{"start":1712913076564,"stop":1712913076565,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"tmpdir","time":{"start":1712913076565,"stop":1712913076565,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1712913076565,"stop":1712913076744,"duration":179},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup","time":{"start":1712913076744,"stop":1712913077188,"duration":444},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"environment_allure","time":{"start":1712913076744,"stop":1712913076744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"showLargeModal\" type=\"button\" class=\"mt-2 btn btn-primary\">...</button> is not clickable at point (696, 324). Other element would receive the click: <h1 class=\"text-center\">...</h1>\n  (Session info: chrome-headless-shell=123.0.6312.105)\nStacktrace:\n#0 0x564cdd0dc873 <unknown>\n#1 0x564cdcdd28c6 <unknown>\n#2 0x564cdce24233 <unknown>\n#3 0x564cdce2214e <unknown>\n#4 0x564cdce1fb27 <unknown>\n#5 0x564cdce1eed3 <unknown>\n#6 0x564cdce12507 <unknown>\n#7 0x564cdce3f5a2 <unknown>\n#8 0x564cdce11e98 <unknown>\n#9 0x564cdce3f76e <unknown>\n#10 0x564cdce5dc19 <unknown>\n#11 0x564cdce3f343 <unknown>\n#12 0x564cdce10593 <unknown>\n#13 0x564cdce10f5e <unknown>\n#14 0x564cdd0a085b <unknown>\n#15 0x564cdd0a47b5 <unknown>\n#16 0x564cdd08e581 <unknown>\n#17 0x564cdd0a5342 <unknown>\n#18 0x564cdd07388f <unknown>\n#19 0x564cdd0cb738 <unknown>\n#20 0x564cdd0cb90b <unknown>\n#21 0x564cdd0db9c4 <unknown>\n#22 0x7fcca2a94ac3 <unknown>","statusTrace":"self = <test_windows.TestWindows object at 0x7f4f2a240b00>\n\n    @allure.title(\"Modal dialogs\")\n    def test_modal_dialogs(self):\n        self.modal_dialogs.open()\n        self.modal_dialogs.is_opened()\n        self.modal_dialogs.click_button_small_modal()\n        self.modal_dialogs.check_small_modal()\n>       self.modal_dialogs.click_button_large_modal()\n\ntests/test_windows.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/windows/modal_dialogs.py:30: in click_button_large_modal\n    self.wait.until(EC.element_to_be_clickable(self.BUTTON_LARGE_MODAL)).click()\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4f2a277ce0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x564cdd0cb90b \\\\u003Cunknown>\\\\n#21 0x564cdd0db9c4 \\\\u003Cunknown>\\\\n#22 0x7fcca2a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"showLargeModal\" type=\"button\" class=\"mt-2 btn btn-primary\">...</button> is not clickable at point (696, 324). Other element would receive the click: <h1 class=\"text-center\">...</h1>\nE         (Session info: chrome-headless-shell=123.0.6312.105)\nE       Stacktrace:\nE       #0 0x564cdd0dc873 <unknown>\nE       #1 0x564cdcdd28c6 <unknown>\nE       #2 0x564cdce24233 <unknown>\nE       #3 0x564cdce2214e <unknown>\nE       #4 0x564cdce1fb27 <unknown>\nE       #5 0x564cdce1eed3 <unknown>\nE       #6 0x564cdce12507 <unknown>\nE       #7 0x564cdce3f5a2 <unknown>\nE       #8 0x564cdce11e98 <unknown>\nE       #9 0x564cdce3f76e <unknown>\nE       #10 0x564cdce5dc19 <unknown>\nE       #11 0x564cdce3f343 <unknown>\nE       #12 0x564cdce10593 <unknown>\nE       #13 0x564cdce10f5e <unknown>\nE       #14 0x564cdd0a085b <unknown>\nE       #15 0x564cdd0a47b5 <unknown>\nE       #16 0x564cdd08e581 <unknown>\nE       #17 0x564cdd0a5342 <unknown>\nE       #18 0x564cdd07388f <unknown>\nE       #19 0x564cdd0cb738 <unknown>\nE       #20 0x564cdd0cb90b <unknown>\nE       #21 0x564cdd0db9c4 <unknown>\nE       #22 0x7fcca2a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Open URL","time":{"start":1712913077189,"stop":1712913078457,"duration":1268},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Check is opened URL","time":{"start":1712913078457,"stop":1712913078461,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Click button small modal","time":{"start":1712913078461,"stop":1712913078582,"duration":121},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Checking a small modal dialogs","time":{"start":1712913078583,"stop":1712913078878,"duration":295},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Click button large modal","time":{"start":1712913078878,"stop":1712913080004,"duration":1126},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"showLargeModal\" type=\"button\" class=\"mt-2 btn btn-primary\">...</button> is not clickable at point (696, 324). Other element would receive the click: <h1 class=\"text-center\">...</h1>\n  (Session info: chrome-headless-shell=123.0.6312.105)\nStacktrace:\n#0 0x564cdd0dc873 <unknown>\n#1 0x564cdcdd28c6 <unknown>\n#2 0x564cdce24233 <unknown>\n#3 0x564cdce2214e <unknown>\n#4 0x564cdce1fb27 <unknown>\n#5 0x564cdce1eed3 <unknown>\n#6 0x564cdce12507 <unknown>\n#7 0x564cdce3f5a2 <unknown>\n#8 0x564cdce11e98 <unknown>\n#9 0x564cdce3f76e <unknown>\n#10 0x564cdce5dc19 <unknown>\n#11 0x564cdce3f343 <unknown>\n#12 0x564cdce10593 <unknown>\n#13 0x564cdce10f5e <unknown>\n#14 0x564cdd0a085b <unknown>\n#15 0x564cdd0a47b5 <unknown>\n#16 0x564cdd08e581 <unknown>\n#17 0x564cdd0a5342 <unknown>\n#18 0x564cdd07388f <unknown>\n#19 0x564cdd0cb738 <unknown>\n#20 0x564cdd0cb90b <unknown>\n#21 0x564cdd0db9c4 <unknown>\n#22 0x7fcca2a94ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/demoqa_ui/demoqa_ui/pages/windows/modal_dialogs.py\", line 30, in click_button_large_modal\n    self.wait.until(EC.element_to_be_clickable(self.BUTTON_LARGE_MODAL)).click()\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":5,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1712913080035,"stop":1712913080331,"duration":296},"status":"passed","steps":[],"attachments":[{"uid":"9168d7a217d418c6","name":"test_modal_dialogs.png","source":"9168d7a217d418c6.png","type":"image/png","size":764295}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true},{"name":"tmp_path::0","time":{"start":1712913080332,"stop":1712913080332,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Alert, Frame and Windows"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_windows"},{"name":"subSuite","value":"TestWindows"},{"name":"host","value":"fv-az1542-814"},{"name":"thread","value":"1878-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_windows"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"dd7330e691509a2a.json","parameterValues":[]}